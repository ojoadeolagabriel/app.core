using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using app.core.data.common.builder.contract;

namespace app.core.data.common.builder
{
    public class SpBuilder
    {
        public static string BuildRetrieveByIdSp(string schema, IDatabaseSourceTypeHandler handler = null, string[] prefixToRemove = null, string primaryKeyColumnDesc = "", long idVal = 0)
        {
            if (handler != null)
            {
                if (!handler.AutoGenerateCrudSql)
                {
                    schema = Cleanup(schema, prefixToRemove);
                    return string.Format("[dbo].usp_select_{0}_by_id", schema);
                }
                return handler.AutoGenerateSelectByIdQuery(schema, primaryKeyColumnDesc, idVal);
            }

            return string.Empty;
        }

        public static string BuildRetrieveAllSp(string schema, string[] prefixToRemove = null, IDatabaseSourceTypeHandler handler = null)
        {
            if (handler != null)
            {
                if (!handler.AutoGenerateCrudSql)
                {
                    schema = Cleanup(schema, prefixToRemove);
                    return string.Format("[dbo].usp_select_{0}{1}", schema, schema.EndsWith("s") ? "" : "s");
                }
                return handler.AutoGenerateSelectAllQuery(schema);
            }

            return string.Empty;
        }

        public static string BuildDeleteByIdSp(string schema, string[] prefixToRemove = null, IDatabaseSourceTypeHandler handler = null, string primaryKeyColumnDesc = "", string idVal ="")
        {
            if (handler != null)
            {
                if (!handler.AutoGenerateCrudSql)
                {
                    schema = Cleanup(schema, prefixToRemove);
                    return string.Format("[dbo].usp_delete_by_{0}", schema);
                }

                return handler.AutoGenerateDeleteQuery(schema, primaryKeyColumnDesc, idVal.ToString(CultureInfo.InvariantCulture));
            }

            return null;
        }

        public static string BuildPersistSp(string schema, string[] ignoreTablePrefixes,
            IDatabaseSourceTypeHandler handler = null, IDictionary<string, object> coll = null)
        {
            if (handler != null)
            {
                if (!handler.AutoGenerateCrudSql)
                {
                    schema = Cleanup(schema, ignoreTablePrefixes);
                    return string.Format("[dbo].usp_insert_{0}", schema);
                }
                return handler.AutoGenerateCreateQuery(schema, coll);
            }
            return null;
        }

        public static string BuildUpdateSp(string schema, string[] ignoreTablePrefixes,
            IDatabaseSourceTypeHandler handler = null, IDictionary<string, object> coll = null,
            string primaryKeyColumnName = "", string primaryKeyColumnValue = "")
        {
            if (handler != null)
            {

                if (!handler.AutoGenerateCrudSql)
                {
                    schema = Cleanup(schema, ignoreTablePrefixes);
                    return string.Format("[dbo].usp_update_{0}_by_id", schema);
                }
                return handler.AutoGenerateUpdateQuery(schema, coll, primaryKeyColumnName, primaryKeyColumnValue);
            }
            return null;
        }

        private static string Cleanup(string schema, IEnumerable<string> ignoreTablePrefixes)
        {
            if (ignoreTablePrefixes != null)
            {
                ignoreTablePrefixes.ToList().ForEach(c => schema = schema.Replace(c, ""));
                if (schema.StartsWith("_"))
                    schema = schema.Remove(0, 1);
            }
            return schema;
        }
    }
}
